// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())
  email String @unique
  phone String @unique
  cpf String @unique
  username String @unique
  password String
  full_name String
  is_admin Boolean @default(false)
  is_influencer Boolean @default(false)
  total_scratchs Int @default(0)
  total_wins Int @default(0)
  total_losses Int @default(0)
  total_deposit Decimal @default(0.00)
  total_withdraw Decimal @default(0.00)



  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  deleted_at DateTime?

  wallet Wallet[]
  deposits Deposit[]
  withdraws Withdraw[]
  games Game[]
  invitedBy String?
  inviteCode InviteCode?
  inviter User? @relation("UserInvites", fields: [invitedBy], references: [id])
  invitedUsers User[] @relation("UserInvites")
  usageLicenses UsageLicense[]
  @@map("users")
}

model Wallet {
  id String @id @default(uuid())
  userId String @unique
  balance Decimal @default(0.00)
  currency String @default("BRL")
  symbol String @default("R$")
  status Boolean @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  deleted_at DateTime?
  
  user User @relation(fields: [userId], references: [id])
  deposits Deposit[]
  withdraws Withdraw[]
  @@map("wallets")
}

model Deposit {
  id String @id @default(uuid())
  userId String
  walletId String
  amount Decimal @default(0.00)
  currency String @default("BRL")
  symbol String @default("R$")
  status Boolean @default(false)
  payment_method String @default("PIX")
  metadata Json?
  paid_at DateTime?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
  wallet Wallet @relation(fields: [walletId], references: [id])
  @@map("deposits")
}

model Withdraw {
  id String @id @default(uuid())
  userId String
  walletId String
  amount Decimal @default(0.00)
  document String
  pix_key String
  pix_type String
  currency String @default("BRL")
  symbol String @default("R$")
  status Boolean @default(false)
  payment_method String @default("PIX")
  metadata Json?
  processed_at DateTime?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
  wallet Wallet @relation(fields: [walletId], references: [id])
  @@map("withdraws")
}

model ScratchCard {
  id String @id @default(uuid())
  name String
  description String?
  price Decimal
  image_url String?
  is_active Boolean @default(true)
  is_featured Boolean @default(false)
  
  // Controle de RTP
  target_rtp Decimal @default(85.00) // RTP alvo em porcentagem (ex: 85%)
  current_rtp Decimal @default(0.00) // RTP atual calculado
  total_revenue Decimal @default(0.00) // Total arrecadado
  total_payouts Decimal @default(0.00) // Total pago em prêmios
  total_games_played Int @default(0) // Total de jogos realizados
  
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  deleted_at DateTime?

  prizes Prize[]
  games Game[]
  usageLicenses UsageLicense[]
  @@map("scratch_cards")
}

model Prize {
  id String @id @default(uuid())
  scratchCardId String
  name String
  description String?
  type String // "MONEY" or "PRODUCT"
  value Decimal? // Para prêmios em dinheiro
  product_name String? // Para produtos físicos
  redemption_value Decimal? // Valor de resgate para produtos físicos
  image_url String?
  probability Decimal // Probabilidade de ganhar (0-100)
  is_active Boolean @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  scratchCard ScratchCard @relation(fields: [scratchCardId], references: [id])
  games Game[]
  @@map("prizes")
}

model Game {
  id String @id @default(uuid())
  userId String
  scratchCardId String
  prizeId String?
  is_winner Boolean @default(false)
  amount_won Decimal @default(0.00)
  prize_type String? // "MONEY", "PRODUCT", "REDEMPTION"
  redemption_choice Boolean @default(false) // Se escolheu valor de resgate ao invés do produto
  status String @default("COMPLETED") // "COMPLETED", "PENDING", "CANCELLED"
  played_at DateTime @default(now())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
  scratchCard ScratchCard @relation(fields: [scratchCardId], references: [id])
  prize Prize? @relation(fields: [prizeId], references: [id])
  @@map("games")
}

model InviteCode {
  id String @id @default(uuid())
  userId String @unique
  code String @unique
  commission_rate Decimal @default(5.00) // Porcentagem de comissão
  total_invites Int @default(0)
  total_commission Decimal @default(0.00)
  is_active Boolean @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
  @@map("invite_codes")
}

model Setting {
  id String @id @default(uuid())
  plataform_name String @default("raspa.ae")
  plataform_description String @default("A plataforma de raspadinhas online mais confiável do Brasil. Ganhe prêmios incríveis e dinheiro real de forma segura e divertida.")
  plataform_logo String?
  plataform_banner String?
  plataform_banner_2 String?
  plataform_banner_3 String?
  register_banner String?
  login_banner String?
  deposit_banner String?

  pluggou_base_url String?
  pluggou_api_key String?
  pluggou_organization_id String?


  @@map("settings")
}

model License {
  id String @id @default(uuid())
  credits Int @default(0)
  credits_used Int @default(0)
  credits_value Decimal @default(0.00)
  ggr_percentage Decimal @default(0.00)
  total_earnings Decimal @default(0.00)
  is_active Boolean @default(true)
  
  usageLicenses UsageLicense[]
  
  @@map("licenses")
}

model UsageLicense {
  id String @id @default(uuid())
  userId String
  licenseId String
  scratchCardId String
  credits_used Int @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
  license License @relation(fields: [licenseId], references: [id])
  scratchCard ScratchCard @relation(fields: [scratchCardId], references: [id])

  @@map("usage_licenses")
}



